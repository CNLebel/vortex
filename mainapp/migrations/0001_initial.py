# Generated by Django 2.2.1 on 2019-05-02 08:53

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('qq', models.CharField(blank=True, default=' ', max_length=20, verbose_name='QQ号码')),
                ('wechat', models.CharField(blank=True, max_length=20, verbose_name='微信账号')),
                ('mobile', models.CharField(blank=True, default=' ', max_length=11, verbose_name='手机号码')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlogArticleColumn',
            fields=[
                ('column_id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('column', models.CharField(blank=True, max_length=200, verbose_name='栏目')),
                ('created', models.DateField(auto_now_add=True, verbose_name='创建日期')),
                ('column_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_column', to=settings.AUTH_USER_MODEL, verbose_name='栏目所属用户')),
            ],
            options={
                'verbose_name': '文章栏目',
                'verbose_name_plural': '文章栏目',
            },
        ),
        migrations.CreateModel(
            name='BlogArticles',
            fields=[
                ('article_id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('article_title', models.CharField(blank=True, max_length=200, verbose_name='博文标题')),
                ('article_slug', models.CharField(blank=True, max_length=500, verbose_name='博文链接')),
                ('article_content', models.TextField(blank=True, verbose_name='博文内容')),
                ('article_abstract', models.CharField(blank=True, max_length=500, verbose_name='摘要')),
                ('article_abstract_img', models.ImageField(blank=True, upload_to='', verbose_name='摘要图片')),
                ('article_views', models.IntegerField(blank=True, default=0, verbose_name='浏览量')),
                ('article_comment_count', models.IntegerField(default=0, verbose_name='评论总数')),
                ('article_date', models.DateTimeField(default=datetime.datetime(2019, 5, 2, 8, 53, 21, 865341, tzinfo=utc), verbose_name='发表时间')),
                ('article_update', models.DateTimeField(auto_now=True, verbose_name='编辑时间')),
                ('article_like_count', models.IntegerField(blank=True, default=0, verbose_name='点赞数')),
                ('article_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_author', to=settings.AUTH_USER_MODEL, verbose_name='文章作者')),
                ('article_column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_column', to='mainapp.BlogArticleColumn', verbose_name='所属栏目')),
            ],
            options={
                'verbose_name': '博客文章',
                'verbose_name_plural': '博客文章',
                'ordering': ('article_title',),
            },
        ),
        migrations.CreateModel(
            name='Sort',
            fields=[
                ('sort_id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('sort_name', models.CharField(blank=True, max_length=50, verbose_name='分类名称')),
                ('sort_alias', models.CharField(blank=True, max_length=50, verbose_name='分类别名')),
                ('sort_description', models.TextField(blank=True, verbose_name='分类描述')),
                ('parent_sort_id', models.IntegerField(blank=True, default=0, verbose_name='父分类ID')),
            ],
            options={
                'verbose_name': '文章分类',
                'verbose_name_plural': '文章分类',
            },
        ),
        migrations.CreateModel(
            name='UsersInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_nickname', models.CharField(blank=True, max_length=20, verbose_name='用户昵称')),
                ('user_profile_photo', models.ImageField(blank=True, upload_to='', verbose_name='头像')),
                ('user_age', models.CharField(blank=True, max_length=20, verbose_name='出生年月日')),
                ('address', models.CharField(blank=True, max_length=200, verbose_name='联系地址')),
                ('occupation', models.CharField(blank=True, max_length=50, verbose_name='职业')),
                ('interest', models.CharField(blank=True, max_length=200, verbose_name='兴趣爱好')),
                ('aboutme', models.TextField(blank=True, verbose_name='简介')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户详细信息',
                'verbose_name_plural': '用户详细信息',
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('label_id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('label_name', models.CharField(blank=True, max_length=500, verbose_name='标签名称')),
                ('label_alias', models.CharField(blank=True, max_length=500, verbose_name='标签别名')),
                ('label_description', models.TextField(blank=True, verbose_name='标签描述')),
                ('label_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to=settings.AUTH_USER_MODEL, verbose_name='标签所属用户')),
            ],
            options={
                'verbose_name': '文章标签',
                'verbose_name_plural': '文章标签',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False, verbose_name='序号')),
                ('comment_commentator', models.CharField(blank=True, max_length=90, verbose_name='评论用户')),
                ('comment_date', models.DateTimeField(default=datetime.datetime(2019, 5, 2, 8, 53, 21, 866901, tzinfo=utc), verbose_name='评论时间')),
                ('comment_content', models.TextField(blank=True, verbose_name='评论内容')),
                ('parent_comment_id', models.IntegerField(blank=True, default=0, verbose_name='父评论ID')),
                ('comment_article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.BlogArticles', verbose_name='评论文章')),
            ],
            options={
                'verbose_name': '博文评论',
                'verbose_name_plural': '博文评论',
            },
        ),
        migrations.AddField(
            model_name='blogarticles',
            name='article_label',
            field=models.ManyToManyField(blank=True, related_name='article_label', to='mainapp.Label', verbose_name='文章标签'),
        ),
        migrations.AddField(
            model_name='blogarticles',
            name='article_like',
            field=models.ManyToManyField(blank=True, related_name='articles_like', to=settings.AUTH_USER_MODEL, verbose_name='点赞'),
        ),
        migrations.AddField(
            model_name='blogarticles',
            name='article_sort',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='article_sort', to='mainapp.Sort', verbose_name='文章分类'),
        ),
        migrations.AlterIndexTogether(
            name='blogarticles',
            index_together={('article_id', 'article_slug')},
        ),
    ]
